spring:
  application:
    name: msvc-orders
  cloud:
    loadbalancer:
      retry:
        enabled: true
  datasource:
    url: ${ORDERDB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update  # Cambiar según sea necesario
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  # Configuración de RabbitMQ
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL}

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full
  circuitbreaker:
    enabled: true

msvc-books:
  url: ${MSVC_BOOKS_URL}

msvc-payments:
  url: ${MSVC_PAYMENTS_URL}

server:
  port: ${ORDER_PORT}

management:
  endpoints:
    web:
      exposure:
        include: "*"

# Logging
logging:
  level:
    root: INFO
    org.springframework.amqp: INFO
    com.microservice.orders: DEBUG
app:
  rabbitmq:
    exchange: ${EXCHANGE_NAME}
    queue: ${QUEUE_NAME}
    routingKey: ${ROUTING_KEY}

# Configuración de Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      msvc-payments:
        recordExceptions:
          - java.net.UnknownHostException
          - java.lang.RuntimeException
          - java.util.concurrent.TimeoutException
          - java.net.ConnectException
        ringBufferSizeInClosedState: 5
        ringBufferSizeInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50


springdoc:
  api-docs:
    path: /orders-docs/v3/api-docs
  swagger-ui:
    path: /orders-docs/swagger-ui.html

jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION}
